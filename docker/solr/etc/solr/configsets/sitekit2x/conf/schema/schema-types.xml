<?xml version="1.0" encoding="UTF-8" ?>
<types>

	<fieldType name="url" class="solr.TextField" positionIncrementGap="100">
		<analyzer type="index">
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1"/>
			<filter class="solr.FlattenGraphFilterFactory"/> <!-- required on index analyzers after graph filters -->
			<!--  Hier nun der ManagedStopWordFilter, beim dem allen CityGov Mitarbeiter-Nachnamen herausgefiltert werden
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_de_url.txt" format="snowball" />
			-->
			<filter class="solr.ManagedStopFilterFactory" managed="german"/>
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1"/>
			<!--  Hier nun der ManagedStopWordFilter, beim dem allen CityGov Mitarbeiter-Nachnamen herausgefiltert werden
				<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_de_url.txt" format="snowball" />
			-->
			<filter class="solr.ManagedStopFilterFactory" managed="german"/>
		</analyzer>
	</fieldType>

	<!-- Solr Standard Typen -->

	<!-- field type definitions. The "name" attribute is
		just a label to be used by field definitions.	The "class"
		attribute and any other attributes determine the real
		behavior of the fieldType.
		Class names starting with "solr" refer to java classes in a
		standard package such as org.apache.solr.analysis
	-->

	<!-- The StrField type is not analyzed, but indexed/stored verbatim. -->
	<fieldType name="string" class="solr.StrField" sortMissingLast="true" />

	<!-- boolean type: "true" or "false" -->
	<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>

	<fieldType name="booleans" class="solr.BoolField" sortMissingLast="true" multiValued="true"/>

	<!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
		currently supported on types that are sorted internally as strings
		and on numeric types.
		This includes "string","boolean", and, as of 3.5 (and 4.x),
		int, float, long, date, double, including the "Trie" variants.
		- If sortMissingLast="true", then a sort on this field will cause documents
		without the field to come after documents with the field,
		regardless of the requested sort order (asc or desc).
		- If sortMissingFirst="true", then a sort on this field will cause documents
		without the field to come before documents with the field,
		regardless of the requested sort order.
		- If sortMissingLast="false" and sortMissingFirst="false" (the default),
		then default lucene sorting will be used which places docs without the
		field first in an ascending sort and last in a descending sort.
	-->

	<!--
		Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.
	-->
	<fieldType name="int" class="solr.IntPointField" docValues="true"/>
	<fieldType name="float" class="solr.FloatPointField" docValues="true"/>
	<fieldType name="long" class="solr.LongPointField" docValues="true"/>
	<fieldType name="double" class="solr.DoublePointField" docValues="true"/>

	<!--
	Numeric field types that index each value at various levels of precision
	to accelerate range queries when the number of values between the range
	endpoints is large. See the javadoc for NumericRangeQuery for internal
	implementation details.

	Smaller precisionStep values (specified in bits) will lead to more tokens
	indexed per value, slightly larger index size, and faster range queries.
	A precisionStep of 0 disables indexing at different precision levels.
	<fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
	<fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
	<fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
	<fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>
	-->

	<!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
		is a more restricted form of the canonical representation of dateTime
		http://www.w3.org/TR/xmlschema-2/#dateTime
		The trailing "Z" designates UTC time and is mandatory.
		Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
		All other components are mandatory.

		Expressions can also be used to denote calculations that should be
		performed relative to "NOW" to determine the value, ie...

				NOW/HOUR
					... Round to the start of the current hour
				NOW-1DAY
					... Exactly 1 day prior to now
				NOW/DAY+6MONTHS+3DAYS
					... 6 months and 3 days in the future from the start of
						the current day

		Consult the DateField javadocs for more information.

		Note: For faster range queries, consider the tdate type
		-->
	<fieldType name="date" class="solr.DatePointField" docValues="true"/>

	<!-- A Trie based date field for faster date range queries and date faceting.
	<fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>
	-->


	<!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
	<fieldtype name="binary" class="solr.BinaryField"/>

				<!-- KD-tree versions of date fields -->
				<fieldType name="pdate" class="solr.DatePointField" docValues="true"/>
				<fieldType name="pdates" class="solr.DatePointField" docValues="true" multiValued="true"/>

				<!--
					Numeric field types that index values using KD-trees. *Point fields are faster and more efficient than Trie* fields both, at
					search time and at index time, but some features are still not supported.
					Point fields don't support FieldCache, so they must have docValues="true" if needed for sorting, faceting, functions, etc.
				-->
				<fieldType name="pint" class="solr.IntPointField" docValues="true"/>
				<fieldType name="pfloat" class="solr.FloatPointField" docValues="true"/>
				<fieldType name="plong" class="solr.LongPointField" docValues="true"/>
				<fieldType name="pdouble" class="solr.DoublePointField" docValues="true"/>

				<fieldType name="pints" class="solr.IntPointField" docValues="true" multiValued="true"/>
				<fieldType name="pfloats" class="solr.FloatPointField" docValues="true" multiValued="true"/>
				<fieldType name="plongs" class="solr.LongPointField" docValues="true" multiValued="true"/>
				<fieldType name="pdoubles" class="solr.DoublePointField" docValues="true" multiValued="true"/>

	<!-- The "RandomSortField" is not used to store or search any
		data.	You can declare fields of this type it in your schema
		to generate pseudo-random orderings of your docs for sorting
		or function purposes.	The ordering is generated based on the field
		name and the version of the index. As long as the index version
		remains unchanged, and the same field name is reused,
		the ordering of the docs will be consistent.
		If you want different psuedo-random orderings of documents,
		for the same version of the index, use a dynamicField and
		change the field name in the request.
	-->
	<fieldType name="random" class="solr.RandomSortField" indexed="true" />

	<!-- solr.TextField allows the specification of custom text analyzers
		specified as a tokenizer and a list of token filters. Different
		analyzers may be specified for indexing and querying.

		The optional positionIncrementGap puts space between multiple fields of
		this type on the same document, with the purpose of preventing false phrase
		matching across fields.

		For more info on customizing your analyzer chain, please see
		http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
	-->

	<!-- One can also specify an existing Analyzer class that has a
		default constructor via the class attribute on the analyzer element.
		Example:
	<fieldType name="text_greek" class="solr.TextField">
		<analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
	</fieldType>
	-->

	<!-- A text field that only splits on whitespace for exact matching of words -->
	<fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.WhitespaceTokenizerFactory"/>
		</analyzer>
	</fieldType>

	<!-- nur LowerCaseFactory und Ascii-MappingCharFilterFactory Ersetzungen OHNE Tokenizer für Filterung, Gruppierung nach Anfangsbuchstaben und ggf. manuelle Sortierung-->
	<fieldType name="text_sort" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.KeywordTokenizerFactory"/>
			<!-- Umwandlung spezieller Zeiche. ZB: A -> Ae | € -> euro-->
			<charFilter class="solr.MappingCharFilterFactory" mapping="schema/mapping-ISOLatin1Accent.txt"/>
			<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
	</fieldType>

	<!--Nur: TokenizerFactory und LowerCaseFilterFactory -->
	<fieldType name="text_lc" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
	</fieldType>

	<!--Nur: TokenizerFactory, StopFilterFactory und LowerCaseFilterFactory für die Suggest Funktion -->
	<fieldType name="text_raw" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_de.txt" format="snowball" />
		</analyzer>
	</fieldType>

	<!--
		Wird für Sprachen verwendet, für die es keine Unterstüzung gibt.
	-->
	<fieldType name="text_fallback" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<!-- Umwandlung spezieller Zeiche. ZB: A -> Ae | € -> euro-->
			<charFilter class="solr.MappingCharFilterFactory" mapping="schema/mapping-ISOLatin1Accent.txt"/>
		</analyzer>
	</fieldType>

	<!-- A general text field that has reasonable, generic
		cross-language defaults: it tokenizes with StandardTokenizer,
	removes stop words from case-insensitive "schema/stopwords.txt"
	(empty by default), and down cases.	At query time only, it
	also applies synonyms. -->
	<!-- zus. zu text_lc noch Ascii und German Normalizer für Suche nach Umlauten und Buchstaben mit accent aigu/grave/circonflexe é/è/ê -->
	<fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<!-- Umwandlung spezieller Zeiche. ZB: A -> Ae | € -> euro-->
			<charFilter class="solr.MappingCharFilterFactory" mapping="schema/mapping-ISOLatin1Accent.txt"/>
		</analyzer>
	</fieldType>

	<!-- A text field with defaults appropriate for English: it
		tokenizes with StandardTokenizer, removes English stop words
		(schema/lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
		finally applies Porter's stemming.	The query time analyzer
		also applies synonyms from synonyms.txt. -->
	<fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
		<analyzer type="index">
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<!-- Case insensitive stop word removal.
			add enablePositionIncrements=true in both the index and query
			analyzers to leave a 'gap' for more accurate phrase queries.
		-->
		<filter class="solr.StopFilterFactory"
				ignoreCase="true"
				words="schema/lang/stopwords_en.txt"

				/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.EnglishPossessiveFilterFactory"/>
	<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
		<filter class="solr.EnglishMinimalStemFilterFactory"/>
	-->
		<filter class="solr.PorterStemFilterFactory"/>
		</analyzer>
		<analyzer type="query">
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.StopFilterFactory"
				ignoreCase="true"
				words="schema/lang/stopwords_en.txt"

				/>
		<filter class="solr.LowerCaseFilterFactory"/>
	<filter class="solr.EnglishPossessiveFilterFactory"/>
	<!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
		<filter class="solr.EnglishMinimalStemFilterFactory"/>
	-->
		<filter class="solr.PorterStemFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- A text field with defaults appropriate for English, plus
	aggressive word-splitting and autophrase features enabled.
	This field is just like text_en, except it adds
	WordDelimiterFilter to enable splitting and matching of
	words on case-change, alpha numeric boundaries, and
	non-alphanumeric chars.	This means certain compound word
	cases will work, for example query "wi fi" will match
	document "WiFi" or "wi-fi".
		-->
	<fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
		<analyzer type="index">
			<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			<!-- Case insensitive stop word removal.
				add enablePositionIncrements=true in both the index and query
				analyzers to leave a 'gap' for more accurate phrase queries.
			-->
			<filter class="solr.StopFilterFactory"
					ignoreCase="true"
					words="schema/lang/stopwords_en.txt"

					/>
			<filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
			<filter class="solr.FlattenGraphFilterFactory"/> <!-- required on index analyzers after graph filters -->
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.PorterStemFilterFactory"/>
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			<filter class="solr.StopFilterFactory"
					ignoreCase="true"
					words="schema/lang/stopwords_en.txt"

					/>
			<filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.PorterStemFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- Less flexible matching, but less false matches.	Probably not ideal for product names,
		but may be good for SKUs.	Can insert dashes in the wrong place and still match. -->
	<fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
		<analyzer type="index">
			<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_en.txt"/>
			<filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
			<filter class="solr.FlattenGraphFilterFactory"/> <!-- required on index analyzers after graph filters -->
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.EnglishMinimalStemFilterFactory"/>
			<!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
				possible with WordDelimiterFilter in conjuncton with stemming. -->
			<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.WhitespaceTokenizerFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_en.txt"/>
			<filter class="solr.WordDelimiterGraphFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.EnglishMinimalStemFilterFactory"/>
			<!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
				possible with WordDelimiterFilter in conjuncton with stemming. -->
			<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- Just like text_general except it reverses the characters of
	each token, to enable more efficient leading wildcard queries. -->
	<fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
		<analyzer type="index">
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/stopwords.txt"  />
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
			maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
		</analyzer>
		<analyzer type="query">
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/stopwords.txt"  />
		<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- charFilter + WhitespaceTokenizer	-->
	<!--
	<fieldType name="text_char_norm" class="solr.TextField" positionIncrementGap="100" >
		<analyzer>
		<charFilter class="solr.MappingCharFilterFactory" mapping="mapping-ISOLatin1Accent.txt"/>
		<tokenizer class="solr.WhitespaceTokenizerFactory"/>
		</analyzer>
	</fieldType>
	-->

	<!-- This is an example of using the KeywordTokenizer along
		With various TokenFilterFactories to produce a sortable field
		that does not include some properties of the source text
		-->
	<fieldType name="alphaOnlySort" class="solr.ICUCollationField" locale="de" strength="primary" sortMissingLast="true"/>


	<fieldtype name="phonetic" stored="false" indexed="true" class="solr.TextField" >
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
		</analyzer>
	</fieldtype>

	<fieldtype name="payloads" stored="false" indexed="true" class="solr.TextField" >
		<analyzer>
		<tokenizer class="solr.WhitespaceTokenizerFactory"/>
		<!--
		The DelimitedPayloadTokenFilter can put payloads on tokens... for example,
		a token of "foo|1.4"	would be indexed as "foo" with a payload of 1.4f
		Attributes of the DelimitedPayloadTokenFilterFactory :
		"delimiter" - a one character delimiter. Default is | (pipe)
	"encoder" - how to encode the following value into a playload
		float -> org.apache.lucene.analysis.payloads.FloatEncoder,
		integer -> o.a.l.a.p.IntegerEncoder
		identity -> o.a.l.a.p.IdentityEncoder
			Fully Qualified class name implementing PayloadEncoder, Encoder must have a no arg constructor.
		-->
		<filter class="solr.DelimitedPayloadTokenFilterFactory" encoder="float"/>
		</analyzer>
	</fieldtype>

	<!-- lowercases the entire field value, keeping it as a single token.	-->
	<fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.KeywordTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory" />
		</analyzer>
	</fieldType>

	<!--
		Example of using PathHierarchyTokenizerFactory at index time, so
		queries for paths match documents at that path, or in descendent paths
	-->
	<fieldType name="descendent_path" class="solr.TextField">
		<analyzer type="index">
	<tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
		</analyzer>
		<analyzer type="query">
	<tokenizer class="solr.KeywordTokenizerFactory" />
		</analyzer>
	</fieldType>
	<!--
		Example of using PathHierarchyTokenizerFactory at query time, so
		queries for paths match documents at that path, or in ancestor paths
	-->
	<fieldType name="ancestor_path" class="solr.TextField">
		<analyzer type="index">
	<tokenizer class="solr.KeywordTokenizerFactory" />
		</analyzer>
		<analyzer type="query">
	<tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/" />
		</analyzer>
	</fieldType>

	<!-- since fields of this type are by default not stored or indexed,
		any data added to them will be ignored outright.	-->
	<fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

	<!-- This point type indexes the coordinates as separate fields (subFields)
		If subFieldType is defined, it references a type, and a dynamic field
		definition is created matching *___<typename>.	Alternately, if
		subFieldSuffix is defined, that is used to create the subFields.
		Example: if subFieldType="double", then the coordinates would be
		indexed in fields myloc_0___double,myloc_1___double.
		Example: if subFieldSuffix="_d" then the coordinates would be indexed
		in fields myloc_0_d,myloc_1_d
		The subFields are an implementation detail of the fieldType, and end
		users normally should not need to know about them.
	-->
	<fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>

	<!-- An alternative geospatial field type new to Solr 4.	It supports multiValued and polygon shapes.
		For more information about this and other Spatial fields new to Solr 4, see:
		http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
	-->
	<!-- Siehe: https://www.indoqa.com/a/solr-geospatial -->
<!--
	<fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
		geo="true" distErrPct="0.025" maxDistErr="0.000009" units="degrees" />

		Siehe auche:
		 * https://www.indoqa.com/a/solr-geospatial
		 * https://cwiki.apache.org/confluence/display/solr/Spatial+Search

	<fieldType name="location_rpt" class="solr.RptWithGeometrySpatialField"
-->
	<fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"
							spatialContextFactory="JTS"
							autoIndex="true"
							validationRule="repairBuffer0"
							distErrPct="0.025"
							maxDistErr="0.001"
							geo="true"
							distanceUnits="kilometers" />

	<!-- some examples for different languages (generally ordered by ISO code) -->

	<!-- Arabic -->
	<fieldType name="text_ar" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<!-- for any non-arabic -->
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_ar.txt" />
		<!-- normalizes ﻯ to ﻱ, etc -->
		<filter class="solr.ArabicNormalizationFilterFactory"/>
		<filter class="solr.ArabicStemFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- Bulgarian -->
	<fieldType name="text_bg" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_bg.txt" />
		<filter class="solr.BulgarianStemFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- Catalan -->
	<fieldType name="text_ca" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<!-- removes l', etc -->
		<filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="schema/lang/contractions_ca.txt"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_ca.txt" />
		<filter class="solr.SnowballPorterFilterFactory" language="Catalan"/>
		</analyzer>
	</fieldType>

	<!-- CJK bigram (see text_ja for a Japanese configuration using morphological analysis) -->
	<fieldType name="text_cjk" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<!-- normalize width before bigram, as e.g. half-width dakuten combine	-->
		<filter class="solr.CJKWidthFilterFactory"/>
		<!-- for any non-CJK -->
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.CJKBigramFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- Czech -->
	<fieldType name="text_cz" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_cz.txt" />
		<filter class="solr.CzechStemFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- Danish -->
	<fieldType name="text_da" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_da.txt" format="snowball" />
		<filter class="solr.SnowballPorterFilterFactory" language="Danish"/>
		</analyzer>
	</fieldType>

	<!-- German -->
	<fieldType name="text_de" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_de.txt" format="snowball" />

		<!-- Umwandlung spezieller Zeiche. ZB: A -> Ae | € -> euro-->
		<charFilter class="solr.MappingCharFilterFactory" mapping="schema/mapping-ISOLatin1Accent.txt"/>

		<filter class="solr.GermanNormalizationFilterFactory"/>

		<!-- less aggressive: <filter class="solr.GermanMinimalStemFilterFactory"/> -->
		<!-- normal: --><filter class="solr.GermanLightStemFilterFactory"/>
		<!-- more aggressive:<filter class="solr.SnowballPorterFilterFactory" language="German2"/>-->
		</analyzer>
	</fieldType>

<!-- Dynamisch verwalten
-->
	<fieldType name="text_de_test" class="solr.TextField" positionIncrementGap="100">
		<analyzer type="index">
			<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\S*)[_:\*\/(]{1}[-]?(innen|in|r)(\W|$)" replacement="$1 $1$2 "/>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.ManagedStopFilterFactory" managed="german"/>
		</analyzer>
		<analyzer type="query">
			<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\S*)[_:\*\/(]{1}[-]?(innen|in|r)(\W|$)" replacement="$1 "/>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.ManagedStopFilterFactory" managed="german"/>
		</analyzer>
	</fieldType>

	<fieldType name="text_de_extended" class="solr.TextField" positionIncrementGap="100">
		<analyzer type="index">
			<!-- Umwandlung spezieller Zeiche. ZB: À -> A | € -> euro |  é -> e   -->
			<charFilter class="solr.MappingCharFilterFactory" mapping="schema/mapping-ISOLatin1Accent.txt"/>
			<!-- gendering. example: 'lehrer:innen' =>  ['lehrer', 'lehrerinnen']  -->
			<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\S*)[_:\*\/(]{1}[-]?(innen|in|r)(\W|$)" replacement="$1 $1$2 "/>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_de.txt" format="snowball" />

			<!-- zur Zeit NUR ausgewählte Synonyme. In der Regel kann/soll das weiterhin redaktionell geschehen: -->
			<filter class="solr.SynonymGraphFilterFactory" synonyms="schema/lang/synonyms_de.txt" ignoreCase="true" expand="true"/>
			<filter class="solr.FlattenGraphFilterFactory"/> <!-- required on index analyzers after graph filters -->

			<!-- Auftrennen von (längeren) zusammengesetzten Begriffen: 'Donaudampfschiff' wird zu 'Donau', 'dampf', 'schiff' -->
			<filter class="solr.DictionaryCompoundWordTokenFilterFactory" dictionary="schema/lang/dictionary_de.txt" minWordSize="8" minSubwordSize="3" maxSubwordSize="15" onlyLongestMatch="true"/>

			<!--  German Stemming: -->
			<!-- germanStemmer:        filter class="solr.GermanStemFilterFactory"/>  gut, aber keien Ausnahmen definierbar -->
			<!-- lightweight stemmer : filter class="solr.GermanLightStemFilterFactory"/>-->
			<!-- even less aggressive: filter class="solr.GermanMinimalStemFilterFactory"/> -->
			<!-- alternative stemmer
				<filter class="solr.GermanNormalizationFilterFactory"/>
			-->
			<filter class="solr.SnowballPorterFilterFactory" protected="schema/lang/protectedWordsGerman.txt"  language="German2"/>

			<!-- The filter removes duplicate tokens in the stream. Tokens are considered to be duplicates ONLY if they have the same text and position values.	 -->
			<filter class="solr.RemoveDuplicatesTokenFilterFactory"/>

		</analyzer>
		<analyzer type="query">
			<!-- Umwandlung spezieller Zeiche. ZB: À -> A | € -> euro |  é -> e   -->
			<charFilter class="solr.MappingCharFilterFactory" mapping="schema/mapping-ISOLatin1Accent.txt"/>
			<!-- gendering. example: 'lehrer:innen' =>  ['lehrer', 'lehrerinnen']  -->
			<charFilter class="solr.PatternReplaceCharFilterFactory" pattern="(\S*)[_:\*\/(]{1}[-]?(innen|in|r)(\W|$)" replacement="$1 "/>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_de.txt" format="snowball" />

			<!-- zur Zeit bitte KEINE Synonyme übernehmen, das kann/soll weiterhin redaktionell geschehen:
			<filter class="solr.SynonymGraphFilterFactory" synonyms="schema/lang/synonymsGerman.txt" ignorecase="true" expand="true"/>
			-->

			<!--  German Stemming: -->
			<!-- germanStemmer:        filter class="solr.GermanStemFilterFactory"/>  gut, aber keien Ausnahmen definierbar -->
			<!-- lightweight stemmer : filter class="solr.GermanLightStemFilterFactory"/>-->
			<!-- even less aggressive: filter class="solr.GermanMinimalStemFilterFactory"/> -->
			<!-- alternative stemmer
				<filter class="solr.GermanNormalizationFilterFactory"/>
			-->
			<filter class="solr.SnowballPorterFilterFactory" protected="schema/lang/protectedWordsGerman.txt"  language="German2"/>

		</analyzer>
	</fieldType>


<!-- TESTS Start: -->
	<fieldType name="text_de_germanStemMin" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.GermanMinimalStemFilterFactory"/>
		</analyzer>
	</fieldType>

	<fieldType name="text_de_germanStemLight" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.GermanLightStemFilterFactory"/>
		</analyzer>
	</fieldType>

	<fieldType name="text_de_germanStem" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.GermanStemFilterFactory"/>
		</analyzer>
	</fieldType>


	<fieldType name="text_de_snowball" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.SnowballPorterFilterFactory" protected="schema/lang/protectedWordsGerman.txt"  language="German2"/>
		</analyzer>
	</fieldType>

<!--  TESTS Ende: -->




	<!-- Greek -->
	<fieldType name="text_el" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<!-- greek specific lowercase for sigma -->
		<filter class="solr.GreekLowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="false" words="schema/lang/stopwords_el.txt" />
		<filter class="solr.GreekStemFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- Spanish -->
	<fieldType name="text_es" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_es.txt" format="snowball" />
		<filter class="solr.SpanishLightStemFilterFactory"/>
		<!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Spanish"/> -->
		</analyzer>
	</fieldType>

	<!-- Basque -->
	<fieldType name="text_eu" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_eu.txt" />
		<filter class="solr.SnowballPorterFilterFactory" language="Basque"/>
		</analyzer>
	</fieldType>

	<!-- Persian -->
	<fieldType name="text_fa" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<!-- for ZWNJ -->
		<charFilter class="solr.PersianCharFilterFactory"/>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.ArabicNormalizationFilterFactory"/>
		<filter class="solr.PersianNormalizationFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_fa.txt" />
		</analyzer>
	</fieldType>

	<!-- Finnish -->
	<fieldType name="text_fi" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_fi.txt" format="snowball" />
		<filter class="solr.SnowballPorterFilterFactory" language="Finnish"/>
		<!-- less aggressive: <filter class="solr.FinnishLightStemFilterFactory"/> -->
		</analyzer>
	</fieldType>

	<!-- French -->
	<fieldType name="text_fr" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<!-- removes l', etc -->
		<filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="schema/lang/contractions_fr.txt"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_fr.txt" format="snowball" />
		<filter class="solr.FrenchLightStemFilterFactory"/>
		<!-- less aggressive: <filter class="solr.FrenchMinimalStemFilterFactory"/> -->
		<!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="French"/> -->
		</analyzer>
	</fieldType>

	<!-- Irish -->
	<fieldType name="text_ga" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<!-- removes d', etc -->
		<filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="schema/lang/contractions_ga.txt"/>
		<!-- removes n-, etc. position increments is intentionally false! -->
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/hyphenations_ga.txt" />
		<filter class="solr.IrishLowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_ga.txt" />
		<filter class="solr.SnowballPorterFilterFactory" language="Irish"/>
		</analyzer>
	</fieldType>

	<!-- Galician -->
	<fieldType name="text_gl" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_gl.txt" />
		<filter class="solr.GalicianStemFilterFactory"/>
		<!-- less aggressive: <filter class="solr.GalicianMinimalStemFilterFactory"/> -->
		</analyzer>
	</fieldType>

	<!-- Hindi -->
	<fieldType name="text_hi" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<!-- normalizes unicode representation -->
		<filter class="solr.IndicNormalizationFilterFactory"/>
		<!-- normalizes variation in spelling -->
		<filter class="solr.HindiNormalizationFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_hi.txt" />
		<filter class="solr.HindiStemFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- Hungarian -->
	<fieldType name="text_hu" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_hu.txt" format="snowball" />
		<filter class="solr.SnowballPorterFilterFactory" language="Hungarian"/>
		<!-- less aggressive: <filter class="solr.HungarianLightStemFilterFactory"/> -->
		</analyzer>
	</fieldType>

	<!-- Armenian -->
	<fieldType name="text_hy" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_hy.txt" />
		<filter class="solr.SnowballPorterFilterFactory" language="Armenian"/>
		</analyzer>
	</fieldType>

	<!-- Indonesian -->
	<fieldType name="text_id" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_id.txt" />
		<!-- for a less aggressive approach (only inflectional suffixes), set stemDerivational to false -->
		<filter class="solr.IndonesianStemFilterFactory" stemDerivational="true"/>
		</analyzer>
	</fieldType>

	<!-- Italian -->
	<fieldType name="text_it" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<!-- removes l', etc -->
		<filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="schema/lang/contractions_it.txt"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_it.txt" format="snowball" />
		<filter class="solr.ItalianLightStemFilterFactory"/>
		<!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Italian"/> -->
		</analyzer>
	</fieldType>

	<!-- Japanese using morphological analysis (see text_cjk for a configuration using bigramming)

		NOTE: If you want to optimize search for precision, use default operator AND in your query
		parser config with <solrQueryParser defaultOperator="AND"/> further down in this file.	Use
		OR if you would like to optimize for recall (default).
	-->
	<fieldType name="text_ja" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="false">
		<analyzer>
		<!-- Kuromoji Japanese morphological analyzer/tokenizer (JapaneseTokenizer)

			Kuromoji has a search mode (default) that does segmentation useful for search.	A heuristic
			is used to segment compounds into its parts and the compound itself is kept as synonym.

			Valid values for attribute mode are:
				normal: regular segmentation
				search: segmentation useful for search with synonyms compounds (default)
			extended: same as search mode, but unigrams unknown words (experimental)

			For some applications it might be good to use search mode for indexing and normal mode for
			queries to reduce recall and prevent parts of compounds from being matched and highlighted.
			Use <analyzer type="index"> and <analyzer type="query"> for this and mode normal in query.

			Kuromoji also has a convenient user dictionary feature that allows overriding the statistical
			model with your own entries for segmentation, part-of-speech tags and readings without a need
			to specify weights.	Notice that user dictionaries have not been subject to extensive testing.

			User dictionary attributes are:
					userDictionary: user dictionary filename
			userDictionaryEncoding: user dictionary encoding (default is UTF-8)

			See lang/userdict_ja.txt for a sample user dictionary file.

			Punctuation characters are discarded by default.	Use discardPunctuation="false" to keep them.

			See http://wiki.apache.org/solr/JapaneseLanguageSupport for more on Japanese language support.
		-->
		<tokenizer class="solr.JapaneseTokenizerFactory" mode="search"/>
		<!--<tokenizer class="solr.JapaneseTokenizerFactory" mode="search" userDictionary="lang/userdict_ja.txt"/>-->
		<!-- Reduces inflected verbs and adjectives to their base/dictionary forms (辞書形) -->
		<filter class="solr.JapaneseBaseFormFilterFactory"/>
		<!-- Removes tokens with certain part-of-speech tags -->
		<filter class="solr.JapanesePartOfSpeechStopFilterFactory" tags="schema/lang/stoptags_ja.txt" />
		<!-- Normalizes full-width romaji to half-width and half-width kana to full-width (Unicode NFKC subset) -->
		<filter class="solr.CJKWidthFilterFactory"/>
		<!-- Removes common tokens typically not useful for search, but have a negative effect on ranking -->
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_ja.txt"  />
		<!-- Normalizes common katakana spelling variations by removing any last long sound character (U+30FC) -->
		<filter class="solr.JapaneseKatakanaStemFilterFactory" minimumLength="4"/>
		<!-- Lower-cases romaji characters -->
		<filter class="solr.LowerCaseFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- Latvian -->
	<fieldType name="text_lv" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_lv.txt" />
		<filter class="solr.LatvianStemFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- Dutch -->
	<fieldType name="text_nl" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_nl.txt" format="snowball" />
		<filter class="solr.StemmerOverrideFilterFactory" dictionary="schema/lang/stemdict_nl.txt" ignoreCase="false"/>
		<filter class="solr.SnowballPorterFilterFactory" language="Dutch"/>
		</analyzer>
	</fieldType>

	<!-- Norwegian -->
	<fieldType name="text_no" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_no.txt" format="snowball" />
		<filter class="solr.SnowballPorterFilterFactory" language="Norwegian"/>
		<!-- less aggressive: <filter class="solr.NorwegianLightStemFilterFactory"/> -->
		<!-- singular/plural: <filter class="solr.NorwegianMinimalStemFilterFactory"/> -->
		</analyzer>
	</fieldType>

	<!-- Polish -->
	<fieldType name="text_pl" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.StandardTokenizerFactory"/>
			<filter class="solr.LowerCaseFilterFactory"/>
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_pl.txt" />
			<filter class="solr.StempelPolishStemFilterFactory"/>
		</analyzer>
	</fieldType>

	<!-- Portuguese -->
	<fieldType name="text_pt" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_pt.txt" format="snowball" />
		<filter class="solr.PortugueseLightStemFilterFactory"/>
		<!-- less aggressive: <filter class="solr.PortugueseMinimalStemFilterFactory"/> -->
		<!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Portuguese"/> -->
		<!-- most aggressive: <filter class="solr.PortugueseStemFilterFactory"/> -->
		</analyzer>
	</fieldType>

	<!-- Romanian -->
	<fieldType name="text_ro" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_ro.txt" />
		<filter class="solr.SnowballPorterFilterFactory" language="Romanian"/>
		</analyzer>
	</fieldType>

	<!-- Russian -->
	<fieldType name="text_ru" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_ru.txt" format="snowball" />
		<filter class="solr.SnowballPorterFilterFactory" language="Russian"/>
		<!-- less aggressive: <filter class="solr.RussianLightStemFilterFactory"/> -->
		</analyzer>
	</fieldType>

	<!-- Swedish -->
	<fieldType name="text_sv" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_sv.txt" format="snowball" />
		<filter class="solr.SnowballPorterFilterFactory" language="Swedish"/>
		<!-- less aggressive: <filter class="solr.SwedishLightStemFilterFactory"/> -->
		</analyzer>
	</fieldType>

	<!-- Thai -->
	<!--
	<fieldType name="text_th" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.ThaiWordFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="true" words="schema/lang/stopwords_th.txt" />
		</analyzer>
	</fieldType>
				-->

	<!-- Turkish -->
	<fieldType name="text_tr" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.TurkishLowerCaseFilterFactory"/>
		<filter class="solr.StopFilterFactory" ignoreCase="false" words="schema/lang/stopwords_tr.txt" />
		<filter class="solr.SnowballPorterFilterFactory" language="Turkish"/>
		</analyzer>
	</fieldType>

	<!-- Ukrainian -->
	<fieldType name="text_uk" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
		<tokenizer class="solr.StandardTokenizerFactory"/>
		<filter class="solr.StopFilterFactory" words="org/apache/lucene/analysis/uk/stopwords.txt"/>
		<filter class="solr.LowerCaseFilterFactory"/>
		<filter class="solr.MorfologikFilterFactory" dictionary="ua/net/nlp/ukrainian.dict"/>
		</analyzer>
	</fieldType>

</types>
